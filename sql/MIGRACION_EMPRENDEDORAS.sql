-- =====================================================
-- üåü EMPRENDEDORAS DE ACERO - MIGRACI√ìN SEGURA
-- Migraci√≥n que preserva productos existentes
-- =====================================================

-- =====================================================
-- üìã NUEVAS TABLAS DE CATEGORIZACI√ìN
-- =====================================================

-- Tabla de categor√≠as principales
CREATE TABLE IF NOT EXISTS categorias_nuevas (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    activo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de tipos de producto (subcategor√≠as)
CREATE TABLE IF NOT EXISTS tipos_producto (
    id SERIAL PRIMARY KEY,
    categoria_id INTEGER REFERENCES categorias_nuevas(id) ON DELETE CASCADE,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    activo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(categoria_id, nombre)
);

-- Tabla de materiales/telas
CREATE TABLE IF NOT EXISTS materiales (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    activo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de colores
CREATE TABLE IF NOT EXISTS colores_productos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    codigo_hex VARCHAR(7),
    activo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- üõçÔ∏è EXTENSI√ìN DE TABLA PRODUCTOS (SIN TOCAR EXISTENTES)
-- =====================================================

-- Agregar nuevas columnas a la tabla productos existente (solo si no existen)
DO $$ 
BEGIN
    -- Verificar y agregar columnas una por una
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='categoria_nueva_id') THEN
        ALTER TABLE productos ADD COLUMN categoria_nueva_id INTEGER REFERENCES categorias_nuevas(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='tipo_producto_id') THEN
        ALTER TABLE productos ADD COLUMN tipo_producto_id INTEGER REFERENCES tipos_producto(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='material_id') THEN
        ALTER TABLE productos ADD COLUMN material_id INTEGER REFERENCES materiales(id);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='tallas_disponibles') THEN
        ALTER TABLE productos ADD COLUMN tallas_disponibles TEXT[]; -- Array de tallas
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='colores_disponibles') THEN
        ALTER TABLE productos ADD COLUMN colores_disponibles TEXT[]; -- Array de colores
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='imagenes_urls') THEN
        ALTER TABLE productos ADD COLUMN imagenes_urls TEXT[]; -- Array de URLs de im√°genes
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='tags') THEN
        ALTER TABLE productos ADD COLUMN tags TEXT[]; -- Tags para b√∫squeda
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='activo') THEN
        ALTER TABLE productos ADD COLUMN activo BOOLEAN DEFAULT true;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='destacado') THEN
        ALTER TABLE productos ADD COLUMN destacado BOOLEAN DEFAULT false;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='generar_con_ia') THEN
        ALTER TABLE productos ADD COLUMN generar_con_ia BOOLEAN DEFAULT false;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='productos' AND column_name='updated_at') THEN
        ALTER TABLE productos ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
END $$;

-- =====================================================
-- üìä DATOS INICIALES PARA EMPRENDEDORAS DE ACERO
-- =====================================================

-- Insertar categor√≠as principales
INSERT INTO categorias_nuevas (nombre, descripcion) VALUES
('Prendas de Vestir', 'Ropa y vestimenta en general'),
('Accesorios', 'Complementos y accesorios'),
('Calzado', 'Zapatos y calzado'),
('Bolsos y Carteras', 'Bolsos, carteras y mochilas'),
('Joyer√≠a', 'Joyas y bijouterie'),
('Hogar', 'Art√≠culos para el hogar'),
('Belleza', 'Productos de belleza y cuidado personal'),
('Artesan√≠as', 'Productos artesanales √∫nicos'),
('Temporada', 'Productos de temporada y especiales')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar tipos de producto
INSERT INTO tipos_producto (categoria_id, nombre, descripcion) VALUES
-- Prendas de Vestir (1)
(1, 'Blusas', 'Blusas casuales y elegantes'),
(1, 'Vestidos', 'Vestidos para toda ocasi√≥n'),
(1, 'Pantalones', 'Pantalones y jeans'),
(1, 'Faldas', 'Faldas de diferentes estilos'),
(1, 'Tops', 'Tops y camisetas'),
(1, 'Chaquetas', 'Chaquetas y abrigos'),
(1, 'Conjuntos', 'Sets coordinados'),
-- Accesorios (2)
(2, 'Collares', 'Collares y cadenas'),
(2, 'Pulseras', 'Pulseras y brazaletes'),
(2, 'Aretes', 'Aretes y pendientes'),
(2, 'Anillos', 'Anillos diversos'),
(2, 'Bufandas', 'Bufandas y pa√±uelos'),
(2, 'Cinturones', 'Cinturones de moda'),
-- Calzado (3)
(3, 'Zapatos', 'Zapatos formales'),
(3, 'Sandalias', 'Sandalias casuales'),
(3, 'Botas', 'Botas y botines'),
(3, 'Deportivos', 'Calzado deportivo'),
-- Bolsos y Carteras (4)
(4, 'Carteras', 'Carteras de mano'),
(4, 'Bolsos', 'Bolsos grandes'),
(4, 'Mochilas', 'Mochilas y backpacks'),
(4, 'Clutches', 'Bolsos peque√±os de noche'),
-- Joyer√≠a (5)
(5, 'Joyas de Plata', 'Joyer√≠a en plata'),
(5, 'Joyas de Oro', 'Joyer√≠a en oro'),
(5, 'Bijouterie', 'Joyer√≠a de fantas√≠a'),
-- Hogar (6)
(6, 'Decoraci√≥n', 'Elementos decorativos'),
(6, 'Textiles', 'Textiles para el hogar'),
(6, 'Organizadores', 'Organizadores y almacenamiento'),
-- Belleza (7)
(7, 'Maquillaje', 'Productos de maquillaje'),
(7, 'Cuidado de la Piel', 'Productos para el cuidado'),
(7, 'Perfumes', 'Fragancias'),
-- Artesan√≠as (8)
(8, 'Tejidos', 'Productos tejidos a mano'),
(8, 'Cer√°mica', 'Productos de cer√°mica'),
(8, 'Madera', 'Artesan√≠as en madera'),
-- Temporada (9)
(9, 'Verano', 'Productos de verano'),
(9, 'Invierno', 'Productos de invierno'),
(9, 'Navidad', 'Productos navide√±os'),
(9, 'San Valent√≠n', 'Productos para San Valent√≠n')
ON CONFLICT (categoria_id, nombre) DO NOTHING;

-- Insertar materiales comunes
INSERT INTO materiales (nombre, descripcion) VALUES
('Algod√≥n', 'Fibra natural suave y transpirable'),
('Poli√©ster', 'Fibra sint√©tica duradera'),
('Lana', 'Fibra natural c√°lida'),
('Seda', 'Fibra natural elegante'),
('Denim', 'Tela resistente para jeans'),
('Lino', 'Fibra natural fresca'),
('Cuero', 'Material natural para accesorios'),
('Cuero Sint√©tico', 'Alternativa vegana al cuero'),
('Lycra', 'Fibra el√°stica'),
('Viscosa', 'Fibra semi-sint√©tica suave'),
('Chiffon', 'Tela ligera y transl√∫cida'),
('Encaje', 'Tela decorativa calada'),
('Metal', 'Para joyer√≠a y accesorios'),
('Plata', 'Metal precioso'),
('Oro', 'Metal precioso'),
('Cer√°mica', 'Material para artesan√≠as'),
('Madera', 'Material natural'),
('Cristal', 'Material transparente decorativo')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar colores b√°sicos
INSERT INTO colores_productos (nombre, codigo_hex) VALUES
('Negro', '#000000'),
('Blanco', '#FFFFFF'),
('Gris', '#808080'),
('Azul', '#0066CC'),
('Azul Marino', '#000080'),
('Rojo', '#FF0000'),
('Rosa', '#FF69B4'),
('Verde', '#008000'),
('Amarillo', '#FFFF00'),
('Naranja', '#FFA500'),
('Morado', '#800080'),
('Beige', '#F5F5DC'),
('Marr√≥n', '#8B4513'),
('Dorado', '#FFD700'),
('Plateado', '#C0C0C0'),
('Turquesa', '#40E0D0'),
('Coral', '#FF7F50'),
('Lavanda', '#E6E6FA'),
('Crema', '#FFFDD0'),
('Vino', '#722F37')
ON CONFLICT (nombre) DO NOTHING;

-- =====================================================
-- üìä VISTA COMPLETA DE PRODUCTOS
-- =====================================================

CREATE OR REPLACE VIEW vista_productos_completa AS
SELECT 
    p.*,
    cn.nombre as categoria_nueva_nombre,
    tp.nombre as tipo_producto_nombre,
    m.nombre as material_nombre,
    -- Convertir arrays a JSON para mejor manejo en frontend
    array_to_json(p.tallas_disponibles) as tallas_json,
    array_to_json(p.colores_disponibles) as colores_json,
    array_to_json(p.imagenes_urls) as imagenes_json,
    array_to_json(p.tags) as tags_json
FROM productos p
LEFT JOIN categorias_nuevas cn ON p.categoria_nueva_id = cn.id
LEFT JOIN tipos_producto tp ON p.tipo_producto_id = tp.id
LEFT JOIN materiales m ON p.material_id = m.id
WHERE p.activo = true OR p.activo IS NULL;

-- =====================================================
-- üîÑ TRIGGER PARA UPDATED_AT
-- =====================================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Solo crear el trigger si no existe
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_productos_updated_at') THEN
        CREATE TRIGGER update_productos_updated_at 
        BEFORE UPDATE ON productos 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
END $$;

-- =====================================================
-- üìù MIGRAR PRODUCTOS EXISTENTES (OPCIONAL)
-- =====================================================

-- Actualizar productos existentes para que tengan una categor√≠a por defecto
UPDATE productos 
SET categoria_nueva_id = 1, activo = true 
WHERE categoria_nueva_id IS NULL;

-- Si tienes una columna 'categoria' antigua, puedes mapearla as√≠:
-- UPDATE productos p
-- SET categoria_nueva_id = cn.id
-- FROM categorias_nuevas cn
-- WHERE p.categoria = cn.nombre AND p.categoria_nueva_id IS NULL;

-- =====================================================
-- ‚úÖ CONFIRMACI√ìN
-- =====================================================

SELECT 
    'Migraci√≥n completada exitosamente! üéâ' as mensaje,
    'Productos existentes preservados ‚úÖ' as estado,
    count(*) as productos_totales
FROM productos;

-- Mostrar estad√≠sticas
SELECT 
    'Categor√≠as creadas:' as tipo,
    count(*) as cantidad
FROM categorias_nuevas
UNION ALL
SELECT 
    'Tipos de producto creados:' as tipo,
    count(*) as cantidad
FROM tipos_producto
UNION ALL
SELECT 
    'Materiales creados:' as tipo,
    count(*) as cantidad
FROM materiales
UNION ALL
SELECT 
    'Colores creados:' as tipo,
    count(*) as cantidad
FROM colores_productos;